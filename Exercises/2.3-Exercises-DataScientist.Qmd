---
title: "Exercises - Dataframes, *The nightmare*"
subtitle: "*Basics of R for Data Science*"
include-in-header: ../assets/header.html
format: 
  html:
    self-contained: true
    toc: true   
    toc-depth: 4  
    toc-expand: 4
    code-fold: false 
    message: false
    css: "../assets/custom.css"
editor: visual
---

## Like a ~~data scientist~~ data cleaner

*The following set of exercises is a simulation of the challenges you will actually encounter in real life as a data scientist. Know that a large portion of your time as a data scientist will likely be spent on data management and cleaning! In the following scenario, imagine that students (or colleagues) have brought you messy dataframes, full of inconsistencies, varying formats, and other issues. Some guidance is provided here, but your goal is to think critically and figure out the most effective solutions. And don't worry: the real world out there is more nightmarish!*

*Notes:*

-   *Some aspects of data cleaning could be addressed externally (e.g., using MS Excel); however, try to solve all issues within R,* <b>using code</b> instead of manual corrections. Imagine one day you might be working with tens of thousands of rows—manual fixes aren’t feasible!
-   *While brute-force methods may get the job done, aim to write clean, efficient, and concise R code. Solving the problem is the priority, but an optimal solution balances correctness with* <b>minimal code complexity and minimal redundancy</b>.

------------------------------------------------------------------------

**SCENARIO:**

Some students (or colleagues) have provided you with data collected from various scales in a sample of participants (Wechsler, INVALSI \[Italian National Assessment of Students\], Personality Questionnaires). Your task is to perform some computations like a data scientist. However, before this, you will need to fix some inconsistencies, correct possible errors, and merge and combine different dataframes, as the data is scattered across multiple documents.

**DOWNLOAD DATA:**

-   INVALSI data: Items from the INVALSI tasks, data for some participants are <a href="datasets/ExerData_Invalsi_1.csv" download>here</a>, others are <a href="datasets/ExerData_Invalsi_2.csv" download>here</a>;
-   <a href="datasets/ExerData_Wechsler.xlsx" download>Wechsler data</a>: Scaled scores from the 10 core subtests;
-   <a href="datasets/ExerData_LabTrials.csv" download>Experimental data</a>: Results from an attentional task with multiple trials (in a long form dataset);
-   <a href="datasets/ExerData_Questionnaires.csv" download>Personality data</a>: Scores from two personality scales (Openness, Agreeableness)

**FINAL GOALS:**

Your task is to create a data science report that includes the following:

-   A correlation matrix (`cor()`) showing the relationships between total scores for these variables: 1. INVALSI; 2. Wechsler; 3. Experimental task; 4. Openness; 5. Agreableness;
-   The descriptive statistics of all the above variables including: mean (`mean()`), standard deviation (`sd()`), median (`median()`), skewness and kurtosis (`skewness()` and `kurtosis()` from the `moments` package);
-   An analysis to determine if there are any significant differences in mean scores between males and females across these variables, using t-tests (`t.test()`)
-   Some basic plots such as boxplots (`boxplot()`) and/or histograms (`hist()`) to visualize distributions, and basic scatterplots (`plot()`) to better understand relationships between correlated variables

**HINTS:**

-   This whole exercise focuses mostly on data structures and dataframes, but it may also involve other concepts, such as using the `for` loop (programming) to streamline operations across several variables.
-   If a variable is treated by R as a character but should be numeric instead, you can use the `as.numeric()` function to convert it. But be cautious! Non-numeric values, such as those containing spaces (""), will be converted to `NA`, even if they include numbers.
-   To automatically replace a character with another character in a string variable/vector in R, you can use the `gsub()` function (note: this can help solve the issue mentioned in the previous point with less damage).
-   The `rbind()` function allows you to combine two dataframes with the same structure, containing data collected from different participants.
-   The `merge()` function allows you to merge two dataframes that contain different variables collected for the same participants (note: use the `by` argument to specify the subject identifier to match the different dataframes).
-   When computing correlations, the `cor()` function allows you to handle missing values (`NA`s) by using the `use` argument, note that this argument offers several options such as `"complete.obs"`, and `"pairwise.complete.obs"`, which lead to different results.
-   <em>Long</em> vs <em>wide</em> format: The data presented as the *"Experimental data"* is in *long format*, meaning it has multiple rows (observations) per participant. This format is a very common output from many experimental software tools, so this is realistic! To aggregate data, in this case, you can use the `aggregate()` function. However, for additional practice and to enhance your data manipulation skills, try to convert the dataset to a *wide format* to arrange it with *one row per participant* (use the `reshape()` function from base R, or the more intuitive `pivot_wider()` function from package `tidyr`).
